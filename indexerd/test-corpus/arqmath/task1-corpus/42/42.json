{"content": "Why is the matrix-defined Cross Product of two 3D vectors always orthogonal?\n\nBy matrix-defined, I mean [imath]\\left<a,b,c\\right>\\times\\left<d,e,f\\right> = \\left|     \\begin{array}{ccc}  i & j & k\\\\  a & b & c\\\\  d & e & f  \\end{array}    \\right|[/imath] ...instead of the definition of the product of the magnitudes multiplied by the sign of their angle, in the direction orthogonal) If I try cross producting two vectors with no [imath]k[/imath] component, I get one with only [imath]k[/imath], which is expected. But why? As has been pointed out, I am asking why the algebraic definition lines up with the geometric definition. \n\n__ANSWER__\n\nThe obvious but slightly trite answer is \"because that's just how the cross-product works as an operation\". If you're looking for an intuitive reason, the cross-product by definition produces a vector that is orthogonal to the two operand (input) vectors. You know that the base vectors [imath]\\mathbf{i}[/imath], [imath]\\mathbf{j}[/imath], and [imath]\\mathbf{k}[/imath] are all orthogonal, thus if your two input vectors lie on the [imath](x, y)[/imath] plane (i.e. only [imath]\\mathbf{i}[/imath] and [imath]\\mathbf{j}[/imath] components), you know that any orthogonal vector must have only a component in the [imath]z[/imath] direction (multiple of [imath]\\mathbf{k}[/imath]). ", "extern_id": "42", "tags": "<linear_algebra><matrices><inner_product_space><orthogonality><cross_product>", "title": "upvote: -2", "url": "42"}